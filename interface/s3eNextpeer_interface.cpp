/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eNextpeer.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eNextpeerRegister_t)(s3eNextpeerCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eNextpeerUnRegister_t)(s3eNextpeerCallback cbid, s3eCallback fn);
typedef       void(*s3eNextpeerChangeCurrentPlayerAvatarUrl_t)(char* Url);
typedef       void(*s3eNextpeerChangeCurrentPlayerName_t)(char* name);
typedef       void(*s3eNextpeerEnableRankingDisplay_t)(bool enableRankingDisplay);
typedef      char*(*s3eNextpeerGetCurrentPlayerDetails_t)();
typedef      char*(*s3eNextpeerGetNextpeerVersion_t)();
typedef       bool(*s3eNextpeerIsCurrentlyInTournament_t)();
typedef       void(*s3eNextpeerLaunchDashboard_t)();
typedef       void(*s3eNextpeerPushDataToOtherPlayers_t)(void* data, uint32 size);
typedef       void(*s3eNextpeerReportControlledTournamentOverWithScore_t)(uint32 score);
typedef       void(*s3eNextpeerReportForfeitForCurrentTournament_t)();
typedef       void(*s3eNextpeerReportScoreForCurrentTournament_t)(uint32 score);
typedef     uint32(*s3eNextpeerTimeLeftForTournament_t)();
typedef       void(*s3eNextpeerUnreliablePushDataToOtherPlayers_t)(void* data, uint32 size);

/**
 * struct that gets filled in by s3eNextpeerRegister
 */
typedef struct s3eNextpeerFuncs
{
    s3eNextpeerRegister_t m_s3eNextpeerRegister;
    s3eNextpeerUnRegister_t m_s3eNextpeerUnRegister;
    s3eNextpeerChangeCurrentPlayerAvatarUrl_t m_s3eNextpeerChangeCurrentPlayerAvatarUrl;
    s3eNextpeerChangeCurrentPlayerName_t m_s3eNextpeerChangeCurrentPlayerName;
    s3eNextpeerEnableRankingDisplay_t m_s3eNextpeerEnableRankingDisplay;
    s3eNextpeerGetCurrentPlayerDetails_t m_s3eNextpeerGetCurrentPlayerDetails;
    s3eNextpeerGetNextpeerVersion_t m_s3eNextpeerGetNextpeerVersion;
    s3eNextpeerIsCurrentlyInTournament_t m_s3eNextpeerIsCurrentlyInTournament;
    s3eNextpeerLaunchDashboard_t m_s3eNextpeerLaunchDashboard;
    s3eNextpeerPushDataToOtherPlayers_t m_s3eNextpeerPushDataToOtherPlayers;
    s3eNextpeerReportControlledTournamentOverWithScore_t m_s3eNextpeerReportControlledTournamentOverWithScore;
    s3eNextpeerReportForfeitForCurrentTournament_t m_s3eNextpeerReportForfeitForCurrentTournament;
    s3eNextpeerReportScoreForCurrentTournament_t m_s3eNextpeerReportScoreForCurrentTournament;
    s3eNextpeerTimeLeftForTournament_t m_s3eNextpeerTimeLeftForTournament;
    s3eNextpeerUnreliablePushDataToOtherPlayers_t m_s3eNextpeerUnreliablePushDataToOtherPlayers;
} s3eNextpeerFuncs;

static s3eNextpeerFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x9aa36f5b, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eNextpeer");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x9aa36f5b, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eNextpeerAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eNextpeerRegister(s3eNextpeerCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[0] func: s3eNextpeerRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eNextpeerRegister(cbid, fn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eNextpeerUnRegister(s3eNextpeerCallback cbid, s3eCallback fn)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[1] func: s3eNextpeerUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eNextpeerUnRegister(cbid, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eNextpeerChangeCurrentPlayerAvatarUrl(char* Url)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[2] func: s3eNextpeerChangeCurrentPlayerAvatarUrl"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerChangeCurrentPlayerAvatarUrl(Url);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eNextpeerChangeCurrentPlayerName(char* name)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[3] func: s3eNextpeerChangeCurrentPlayerName"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerChangeCurrentPlayerName(name);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eNextpeerEnableRankingDisplay(bool enableRankingDisplay)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[4] func: s3eNextpeerEnableRankingDisplay"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerEnableRankingDisplay(enableRankingDisplay);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

char* s3eNextpeerGetCurrentPlayerDetails()
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[5] func: s3eNextpeerGetCurrentPlayerDetails"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    char* ret = g_Ext.m_s3eNextpeerGetCurrentPlayerDetails();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

char* s3eNextpeerGetNextpeerVersion()
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[6] func: s3eNextpeerGetNextpeerVersion"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    char* ret = g_Ext.m_s3eNextpeerGetNextpeerVersion();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool s3eNextpeerIsCurrentlyInTournament()
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[7] func: s3eNextpeerIsCurrentlyInTournament"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_s3eNextpeerIsCurrentlyInTournament();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eNextpeerLaunchDashboard()
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[8] func: s3eNextpeerLaunchDashboard"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerLaunchDashboard();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eNextpeerPushDataToOtherPlayers(void* data, uint32 size)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[9] func: s3eNextpeerPushDataToOtherPlayers"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerPushDataToOtherPlayers(data, size);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eNextpeerReportControlledTournamentOverWithScore(uint32 score)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[10] func: s3eNextpeerReportControlledTournamentOverWithScore"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerReportControlledTournamentOverWithScore(score);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eNextpeerReportForfeitForCurrentTournament()
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[11] func: s3eNextpeerReportForfeitForCurrentTournament"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerReportForfeitForCurrentTournament();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eNextpeerReportScoreForCurrentTournament(uint32 score)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[12] func: s3eNextpeerReportScoreForCurrentTournament"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerReportScoreForCurrentTournament(score);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

uint32 s3eNextpeerTimeLeftForTournament()
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[13] func: s3eNextpeerTimeLeftForTournament"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    uint32 ret = g_Ext.m_s3eNextpeerTimeLeftForTournament();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eNextpeerUnreliablePushDataToOtherPlayers(void* data, uint32 size)
{
    IwTrace(NEXTPEER_VERBOSE, ("calling s3eNextpeer[14] func: s3eNextpeerUnreliablePushDataToOtherPlayers"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eNextpeerUnreliablePushDataToOtherPlayers(data, size);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
