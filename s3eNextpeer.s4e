
callbacks
include:

#include <s3eTypes.h>

#define S3E_NEXTPEER_STRING_MAX_1 50
#define S3E_NEXTPEER_STRING_MAX_2 150


typedef enum s3eNextpeerCallback
{
    S3E_NEXTPEER_CALLBACK_NEXTPEER_DID_APPEAR,
    S3E_NEXTPEER_CALLBACK_NEXTPEER_DID_DISAPPEAR,
    S3E_NEXTPEER_CALLBACK_NEXTPEER_RETURNED_TO_GAME,
    S3E_NEXTPEER_CALLBACK_RECEIVED_TOURNAMENT_CUSTOM_MESSAGE,
    S3E_NEXTPEER_CALLBACK_RECEIVED_TOURNAMENT_STATUS,
    S3E_NEXTPEER_CALLBACK_RECEIVED_UNRELIABLE_TOURNAMENT_CUSTOM_MESSAGE,
    S3E_NEXTPEER_CALLBACK_GAME_SUPPORTS_TOURNAMENT,
    S3E_NEXTPEER_CALLBACK_TOURNAMENT_ENDS,
    S3E_NEXTPEER_CALLBACK_TOURNAMENT_STARTS,
    S3E_NEXTPEER_CALLBACK_MAX
} s3eNextpeerCallback;

typedef struct s3eNextpeerTournamentPlayer{

   const char* m_playerId;
   const char* m_playerImageUrl;
   bool m_playerIsBot;
   const char* m_playerName;
   
}s3eNextpeerTournamentPlayer;
typedef struct s3eNextpeerTournamentCustomMessage{

	const char* m_playerID; 
    const char* m_playerName;
    const char* m_playerImageUrl;
	void* m_messageData; 
    uint32 m_mesageDataLen;
    bool playerIsBot;
    
} s3eNextpeerTournamentCustomMessage;

typedef struct s3eNextpeerTournamentEndData {

    s3eNextpeerTournamentPlayer m_currentPlayer;
    s3eNextpeerTournamentPlayer** m_opponents;  //todoooooooooooooooooooo
    uint32 m_tournamentTotalPlayers;
    const char* m_tournamentUuid;
    
}s3eNextpeerTournamentEndData;



typedef struct s3eNextpeerTournamentPlayerResult{

    bool m_didForfeit;
    bool m_isStillPlaying;
    char* m_player;  //player ID
    uint32 m_score;

}s3eNextpeerTournamentPlayerResult;

typedef struct s3eNextpeerTournamentStartData{

     char* m_currentPlayer; // currentplayer ID
    uint32 m_numberOfPlayers;
     char* m_opponents;   // a coma separated string of opponent's ids
    int m_tournamentIsGameControlled;
     char* m_tournamentName;
    uint32 m_tournamentRandomSeed;
    uint32 m_tournamentTimeSeconds;
     char* m_tournamentUuid;
    
} s3eNextpeerTournamentStartData;

typedef struct s3eNextpeerTournamentStatusInfo{
    
    s3eNextpeerTournamentPlayerResult** m_sortedResults;   //todoooooooooooo

}s3eNextpeerTournamentStatusInfo;



functions:


void s3eNextpeerChangeCurrentPlayerAvatarUrl(char* Url) void 
void s3eNextpeerChangeCurrentPlayerName(char* name) void 
void s3eNextpeerEnableRankingDisplay(bool enableRankingDisplay) void 
char* s3eNextpeerGetCurrentPlayerDetails() NULL
char* s3eNextpeerGetNextpeerVersion() NULL
bool s3eNextpeerIsCurrentlyInTournament() 0
void s3eNextpeerLaunchDashboard() void run_on_os_thread
void s3eNextpeerPushDataToOtherPlayers(void* data, uint32 size) void
void s3eNextpeerReportControlledTournamentOverWithScore(uint32 score) void
void s3eNextpeerReportForfeitForCurrentTournament() void
void s3eNextpeerReportScoreForCurrentTournament(uint32 score) void
uint32 s3eNextpeerTimeLeftForTournament() 0
void s3eNextpeerUnreliablePushDataToOtherPlayers(void* data, uint32 size) void 








